#!/usr/bin/perl
# Copyright 2012, Olof Johansson <olof@ethup.se>
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice are preserved. This file is
# offered as-is, without any warranty.

use warnings FATAL => 'all';
use strict;
use feature qw/say/;

our $APP = 'transmish';
our $VERSION = 0.1;

use App::transmish::Out;
use App::transmish::Out::Client;
use App::transmish::Out::Torrent;
use App::transmish::Command;
use App::transmish::Client;
use App::transmish::Utils qw/read_file/;

use Getopt::Long qw/:config gnu_getopt/;
use Term::ReadLine;
use MIME::Base64;
use Pod::Usage;

my $debug = 3;
my $term;

cmd list => sub {
	my $client = client or return;

	$client->read_all or do {
		error $client->error;
		return;
	};

	App::transmish::Out::Torrent::summary($_) for @{$client->torrents};
	App::transmish::Out::Client::summary($client);
};

cmd active => sub {
	my $client = client or return;

	$client->read_all or do {
		error $client->error;
		return;
	};

	App::transmish::Out::Torrent::summary($_) for grep {
		$_->peers_connected > 0
	} @{$client->torrents};
	App::transmish::Out::Client::summary($client);
};

cmd add => sub {
	my $client = client or return;
	my $file = shift;

	my %add_args;
	$add_args{metainfo} = read_file($file) if -e $file;
	$add_args{filename} = $file unless $add_args{metainfo};

	$client->add(%add_args) or error $client->error;
};

cmd rm => sub {
	my $client = client or return;
	my $index = shift or do {
		error "No id given";
		return;
	};

	my $delete = 0;

	# FIXME: do getopt on commands
	if($index eq '-d') {
		$index = shift;
		$delete = 1;
	}

	$client->remove(
		ids => [$index],
		delete_local_data => $delete,
	) or error $client->error;
};

cmd torrent => sub {
	my $client = client or return;
	my $index = shift or do {
		error 'No id given';
		return;
	};

	my ($torrent) = $client->read_torrents(ids => [$index]);
	unless($torrent) {
		error "No torrent with id $index";
		return;
	}
	$torrent->read_all;

	unless(@_) {
		App::transmish::Out::Torrent::status($torrent);
		return 1;
	}

	my $cmd = shift;
	run_subcmd 'torrent', $cmd, $client, $torrent, @_;
};

subcmd torrent => files => sub {
	my $client = shift;
	my $torrent = shift;
	my $cmd = @_ ? shift : 'show';

	run_subcmd 'torrent/files', $cmd, $client, $torrent, @_;
};

subcmd 'torrent/files' => show => sub {
	my $client = shift;
	my $torrent = shift;
	App::transmish::Out::Torrent::files($torrent);
	return 1;
};

subcmd 'torrent/files' => on => sub {
	my $client = shift;
	my $torrent = shift;
	my $pattern = shift;

	select_wanted($client, $torrent, 1, $pattern ? qr/$pattern/ : qr/.*/);
	return 1;
};

subcmd 'torrent/files' => off => sub {
	my $client = shift;
	my $torrent = shift;
	my $pattern = shift;

	select_wanted($client, $torrent, 0, $pattern ? qr/$pattern/ : qr/.*/);
	return 1;
};

subcmd torrent => set => sub {
	my $client = shift;
	my $torrent = shift;
	my ($key, $val) = shift;

	error 'Not implemented yet. Live long and prosper in the meantime.';
};

subcmd torrent => start => sub {
	my $client = shift;
	my $torrent = shift;

	$torrent->start;
};

subcmd torrent => stop => sub {
	my $client = shift;
	my $torrent = shift;

	$torrent->stop;
};

cmd help => sub {
	my $cmd = shift;
	my %commands = map { $_ => 1 } cmds;

	if($cmd) {
		if($commands{$cmd}) {
			pod2usage(
				-verbose => 99,
				-sections => ["COMMANDS/$cmd"],
				-exitval => 'NOEXIT',
			);
		} else {
			error "No such commands: '$cmd'";
		}
	} else {
		say "Available commands:";
		say "  $_" for keys %commands;
		say "Do 'help <command>' for more info";
	}
};

cmd quit => sub { exit 0 };
alias q => 'quit';

sub select_wanted {
	my $client = shift;
	my $torrent = shift;
	my $wanted = shift;
	my $pattern = shift;
	my $descrf = "%s %s for download\n";
	my $change = 0;

	for my $file (
		sort { $a->name cmp $b->name }
		grep { $_->name =~ /$pattern/ }
		@{$torrent->files}
	) {
		printf $descrf, $wanted ? 'Marking' : 'Unmarking', $file->name;
		$file->wanted($wanted);
		$change = 1;
	}

	return 1 unless $change;
	$torrent->write_wanted or error $client->error;
	return 1;
}

sub gen_matches {
	my($text, $buf, $start, $end) = @_;

	if(substr($buf, 0, $start) =~ /^\s*$/) {
		my @ret = grep { /^$buf/ } ('', cmds);
		#unshift @ret, '' if @ret > 1;
		return @ret;
	} else {
		return ();
	}
}

sub help {
	pod2usage(
		-verbose => 99,
		-sections => [qw/NAME OPTIONS/],
	);
}

# FIXME: do getopt
my $opts = {
	help => sub { help() },
	verbose => 0,
	config => "$ENV{HOME}/.transmishrc",
};
GetOptions($opts,
	'help|h',
	'verbose|v+',
	'config|c',
) or exit 1;

crap "No non-interactive support yet" unless -t STDIN;

App::transmish::Out::dbglvl($opts->{verbose});
App::transmish::Config::load($opts->{config});
$term = Term::ReadLine->new('transmish');

my $attr = $term->Attribs;
$attr->{attempted_completion_function} = \&gen_matches;
my $out = $term->OUT // \*STDOUT;

while(defined (my $row = $term->readline('> '))) {
	next unless $row =~ /\S/;
	$term->addhistory($row);

	run split /\s+/, $row;
}

=head1 NAME

transmish, a transmission shell interface

=head1 DESCRIPTION

This is a simple shell interface for the Transmission bittorrent
client.

=head1 OPTIONS

 --config -c <file>  specify configuration file to use (default ~/.transmishrc)
 --debug -d          increase debug level (can be used multiple times)
 --help -h           shows a listing of the possible flags

=head1 COMMANDS

=head2 list

List all torrents.

=head2 active

List all active torrents; that is torrents which Transmission
claims to have connected peers with.

=head2 torrent

Show info for a specific torrent. Takes the id of the torrent
as argument, optionally followed by a sub command:

=head3 files

List all files and their current status (percent downloaded,
marked for download, filename etc).

=head3 set

Show or modify per torrent settings.

=head2 add

Add torrent, either as a path to a local file or as an URI.

=head2 rm

Remove torrent. Takes the id of the torrent as argument. There
will be no confirmation dialog so make sure not to do any typos
(this is subject to change).

=head2 quit

Quit transmish. "q" is an alias for quit.

=head2 help

Without argument, prints a list of available commands. Given an
argument, shows help on a specific command.

=head1 CONTRIBUTING AND REPORTING BUGS

The main repository is located on L<https://github.com/olof/transmish>.
Feel free to open issues there or do pull requests. If you don't do
github, you can send me URL to git repositories elsewhere or send me
patches per mail.

=head1 COPYRIGHT

Copyright 2012, Olof Johansson <olof@ethup.se>

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice are preserved. This file is offered as-is, without any warranty.
